// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role{
  id        String     @id @default(uuid())
  name      AppRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  auth  Auth[]
  jobLising Job[]
}

model Auth{
  id        String     @id @default(uuid())
  email     String   @unique
  role String @default("5e002e42-37c9-4a96-8f35-275b21cfb255")
  Role Role @relation(fields: [role], references: [id])
  password  String   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User[]
  blog Blog[]
  service Service[]
  order Order[]
  faq FAQ[]
  jobLising Job[]
  cart Cart[]
}

model User {
  id         String       @id @default(uuid())
  phoneNumber String?       @unique
  userName    String?
  authId String
  auth   Auth @relation(fields: [authId], references: [id])
  linkedIn    String?      
  dateOfBirth DateTime?    
  isRemoved   Boolean @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model BlogTag {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tagName   String
  blogs     BlogTagToBlog[]  
}

model BlogTagToBlog {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  blog      Blog     @relation(fields: [blogId], references: [id])
  blogId    String
  tag       BlogTag  @relation(fields: [tagId], references: [id])
  tagId     String
}

model Blog {
  id         String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  blogTitle String
  blogImage   String       
  blogContent String      
  blogAuthor  Auth         @relation(fields: [addedBy], references: [id])
  addedBy    String       
  tags       BlogTagToBlog[] 
}


model Service {
  id          String     @id @default(uuid())
  addedBy String 
  auth Auth @relation(fields: [addedBy], references: [id])
  category ServiceCatefory
  serviceName String
  description String
  features    String[]
  idealFor    String
  price       String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  order Order[]
  cart Cart[]
}


model Order {
  id           String      @id @default(uuid())
  service     Service    @relation(fields: [serviceId], references: [id])
  serviceId  String    
  status       OrderStatus  @default(PENDING)
  customer     Auth    @relation(fields: [customerId], references: [id])
  customerId   String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model FAQ {
  id          String      @id @default(uuid())
  question    String
  answer      String
  auth Auth @relation(fields: [addedBy], references: [id])
  addedBy     String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model WebsiteStats {
  id String      @id @default(uuid())
  users        Int      @default(0)
  orders       Int      @default(0)
  websiteVisits Int      @default(0)
  updatedAt    DateTime @updatedAt
}

model Job {
  id String      @id @default(uuid())
  jobTitle                String
  jobDescription          String
  jobLocation             String
  role Role @relation(fields: [jobRole], references: [id])
  jobRole                 String
  responsibilities        String[]      
  requirements            String[]      
  preferredQualifications String[]      
  applicationInstructions String
  applicationDeadline     DateTime
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  blogAuthor  Auth         @relation(fields: [addedBy], references: [id])
  addedBy    String 
}

model Cart {
  id String      @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String      
  auth Auth @relation(fields: [userId], references: [id])
  serviceId      String       
  product        Service      @relation(fields: [serviceId], references: [id])
}




enum AppRole {
  SUPER_ADMIN
  HR
  USER
  CONTENT_MANAGER
  PRODUCT_MANAGER
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELED
}

enum ServiceCatefory {
  INTRO
  BASE
  POPULAR
  ENTERPRISE
}